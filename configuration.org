#+TITLE: Emacs Configuration
#+AUTHOR: Zach Crystal
* Startup
** Lexical Binding
#+begin_src emacs-lisp
;;; init.el --- -*- lexical-binding: t -*-
#+end_src
** Defer Garbage Collection
#+begin_src emacs-lisp
(setq gc-cons-threshold 100000000)
#+end_src
* Configure =use-package=
#+BEGIN_SRC emacs-lisp
(require 'use-package-ensure)
(setq use-package-always-ensure t)

(use-package auto-compile
  :config (auto-compile-on-load-mode))
(setq load-prefer-newer t)
#+END_SRC

** Auto Package Update
#+begin_src emacs-lisp
  (use-package auto-package-update
    :if (not (daemonp))
    :custom
    (auto-package-update-interval 7) ;; in days
    (auto-package-update-prompt-before-update t)
    (auto-package-update-delete-old-versions t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe))
#+end_src

* Misc
** Personal Info
#+begin_src emacs-lisp
(setq user-full-name "Zach Crystal"
      user-full-address "zachcrystal@gmail.com")
#+end_src
** Custom.el
Put all the customize code in its own separate file, instead of it cluttering init.el
#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file 'noerror)
#+end_src

** Spelling
#+begin_src emacs-lisp
  (use-package flyspell
    :hook ((org-mode text-mode) . flyspell-mode)
    :custom
    ;(flyspell-abbrev-p t)
    (flyspell-default-dictionary "en_US")
    (flyspell-issue-message-flag nil)
    (flyspell-issue-welcome-flag nil))

  (use-package flyspell-correct-ivy
    :after flyspell
    :bind (:map flyspell-mode-map
                ("C-c $" . flyspell-correct-word-generic))
    :custom (flyspell-correct-interface 'flyspell-correct-ivy))
#+end_src
** exec-path-from-shell
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (exec-path-from-shell-initialize))
#+end_src
** Operating System
#+begin_src emacs-lisp
  ;; Check if system is Darwin/macOS
  (defun is-darwin ()
    "Return true if system is darwin-based (Mac OS X)"
    (string-equal system-type "darwin")
    )

  ;; Check if system is GNU/Linux
  (defun is-linux ()
    "Return true if system is GNU/Linux-based"
    (string-equal system-type "gnu/linux")
    )
#+end_src
** mac command key to meta
#+begin_src emacs-lisp
  (when (is-darwin)
    (setq mac-option-key-is-meta nil
        mac-command-key-is-meta t
        mac-command-modifier 'meta
        mac-option-modifer 'none)
    )
#+end_src

** Keybindings
#+begin_src emacs-lisp
  ;; (global-set-key "\C-x\C-m" 'execute-extended-command)
  ;; (global-set-key "\C-c\C-m" 'execute-extended-command)
#+end_src
* UI
** Font
#+begin_src emacs-lisp
  (when (is-linux)
    (setq default-frame-alist '((font . "IBMPlexMono 9")))
    )

  (when (is-darwin)
    (setq default-frame-alist '((font . "IBM Plex Mono 12")))
    )
#+end_src

** Modeline
I like doom-modeline. It's cool.
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :hook (after-init . doom-modeline-mode))
#+END_SRC

** eyebrowse
#+begin_src emacs-lisp
  (use-package eyebrowse
    :config (eyebrowse-mode t))
#+end_src
** paradox
#+begin_src emacs-lisp
(use-package paradox
  :config
  (paradox-enable))
#+end_src

** Scrolling
Is this even doing anything?
#+begin_src emacs-lisp
  (setq scroll-step 1)
  (setq scroll-margin 1)
  (setq scroll-conservatively 101)
  (setq scroll-up-aggressively 0.01)
  (setq scroll-down-aggressively 0.01)
  (setq auto-window-vscroll nil)
  (setq fast-but-imprecise-scrolling nil)
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
  (setq mouse-wheel-progressive-speed nil)
  ;; Horizontal Scroll
  (setq hscroll-step 1)
  (setq hscroll-margin 1)
#+end_src

** Settings
Turn off all GUI menu stuff and other general stuff
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)

  (when (is-darwin)
    (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
    (add-to-list 'default-frame-alist '(ns-appearance . dark))
    )

  (global-hl-line-mode 1)

  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Theme
Gotta have aod everywhere
#+BEGIN_SRC emacs-lisp
  (use-package atom-one-dark-theme
    :config
    ;(set-face-background 'org-block-begin-line "#21272d")
    (set-face-background 'org-block "#21272d")
    (set-face-foreground 'org-block-begin-line "#525E6C")
    :init(load-theme 'atom-one-dark t))
#+END_SRC

** Icons
#+begin_src emacs-lisp
  (use-package all-the-icons)
#+end_src

* Editor Settings
#+BEGIN_SRC emacs-lisp
(setq-default
 indent-tabs-mode nil
 tab-width 2
 fill-column 80
 require-final-newline t
 c-basic-offset 2
 scroll-step 1
 enable-recursive-minibuffers t)

(show-paren-mode t)
(electric-pair-mode 1)
(set-default-coding-systems 'utf-8)

;; Misc Config
(setq make-backup-files nil)
(setq auto-save-default nil)
(setq ring-bell-function 'ignore)
(setq sentence-end-double-space nil)

;; after copy Ctrl+c in Linux X11, you can paste by 'yank' in emacs
(setq x-select-enable-clipboard t)

;; after mouse selection in X11, you can paste by 'yank' in emacs
(setq x-select-enable-primary t)
#+END_SRC

When you have text selected, pressing a key replaces the current selected text
#+begin_src emacs-lisp
(delete-selection-mode t)
#+end_src

* Base Packages
** adaptive-wrap
Wrap lines but also keeps them indented
#+BEGIN_SRC emacs-lisp
(use-package adaptive-wrap
  :config
  (setq-default adaptive-wrap-extra-indent 1)
  (add-hook 'visual-line-mode-hook #'adaptive-wrap-prefix-mode)
  (global-visual-line-mode +1))
#+END_SRC
** alert
#+begin_src emacs-lisp
(use-package alert
  :config
  (setq alert-default-style 'libnotify))
#+end_src

** clipmon
Adds things you copy and paste system-wide to the kill ring
#+begin_src emacs-lisp
(use-package clipmon
  :config
  (clipmon-mode))
#+end_src
** Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :bind
    (:map company-active-map
          ("C-n" . company-select-next-or-abort)
          ("C-p" . company-select-previous-or-abort))
    :custom
    (company-backends '(company-capf))
    (company-begin-commands '(self-insert-command))
    (company-idle-delay .3)
    (company-minimum-prefix-length 2)
    (company-show-numbers t)
    (company-tooltip-align-annotations t)
    (global-company-mode 1))

#+END_SRC
** Crux
Keybindings that help move around
#+BEGIN_SRC emacs-lisp
(use-package crux
  :bind (("C-a" . crux-move-beginning-of-line)
         ("C-k" . crux-smart-kill-line)
         ("C-c I" . crux-find-user-init-file)
         ("C-S-o" . crux-smart-open-line-above)
         ("C-o" . crux-smart-open-line)
         ("C-c d" . crux-duplicate-current-line-or-region)
         ("C-c M-d" . crux-duplicate-and-comment-current-line-or-region)
         ("C-c n" . crux-cleanup-buffer-or-region)))
#+END_SRC

** Dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :config
  (dashboard-setup-startup-hook))
#+END_SRC

** expand-region
Quicker selection of text. Doesn't always work as I would like. Sometimes it goes from highlighting the line to highlighting the entire page which I dont like.
#+begin_src emacs-lisp
  (use-package expand-region
    :bind
    (("C-=" . er/expand-region)
     ("C-+" . er/contract-region)
     :map mode-specific-map
     :prefix-map region-prefix-map
     :prefix "r"
     ("(" . er/mark-inside-pairs)
     (")" . er/mark-outside-pairs)
     ("'" . er/mark-inside-quotes)
     ([34] . er/mark-outside-quotes) ; it's just a quotation mark
     ("b" . er/mark-org-code-block)
     ("." . er/mark-method-call)
     ("u" . er/mark-url)))
#+end_src

** Help
#+begin_src emacs-lisp
  (use-package helpful
    :defer t)
#+end_src
** shell-pop
=C-t= pops up an ansi-term which works with fish. =C-d= closes the buffer.
#+BEGIN_SRC emacs-lisp
(use-package shell-pop
  :bind (("C-t" . shell-pop))
  :config
  (setq shell-pop-shell-type (quote ("ansi-term" "*ansi-term*" (lambda nil (ansi-term shell-pop-term-shell)))))
  (setq shell-pop-term-shell "/usr/bin/fish")
  ;; need to do this manually or not picked up by `shell-pop'
  (shell-pop--set-shell-type 'shell-pop-shell-type shell-pop-shell-type))
#+END_SRC

** recentf
History 
#+begin_src emacs-lisp
  (use-package recentf
    :ensure nil
    :hook (after-init . recentf-mode)
    :custom
    (recentf-auto-cleanup "05:00am")
    (recentf-max-saved-items 200)
    (recentf-exclude '((expand-file-name package-user-dir)
                       ".cache"
                       ".cask"
                       ".elfeed"
                       "bookmarks"
                       "cache"
                       "ido.*"
                       "persp-confs"
                       "recentf"
                       "undo-tree-hist"
                       "url"
                       "COMMIT_EDITMSG\\'")))

  ;; When buffer is closed, saves the cursor location
  (save-place-mode 1)

  ;; Set history-length longer
  (setq-default history-length 500)
#+end_src

** undo-tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :bind ("C-x u" . undo-tree-visualize)
    :config
    (global-undo-tree-mode t))
#+end_src

** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config
  (which-key-mode))
#+END_SRC

** yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :config
    (yas-global-mode))

  (use-package yasnippet-snippets)

  (use-package ivy-yasnippet)
  (use-package react-snippets)
#+end_src

* Project Management
** avy
#+BEGIN_SRC emacs-lisp  
  (use-package avy
    :config
    (avy-setup-default)
    :bind (("C-:" . avy-goto-char)
           ("C-'" . avy-goto-char-2)
           ("M-g f" . avy-goto-line)
           ("M-g w" . avy-goto-word-1)))

  (use-package avy-zap
    :bind
    ([remap zap-to-char] . avy-zap-to-char))
#+END_SRC

** ace-window
#+begin_src emacs-lisp
(use-package ace-window
  :custom
  (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l) "Use home row for selecting")
  (aw-scope 'frame "Highlight only current frame.")
  :bind
  ("M-o" . ace-window))
#+end_src

** ace-jump-buffer
#+begin_src emacs-lisp
(use-package ace-jump-buffer
  :bind
  (:map goto-map
        ("b" . ace-jump-buffer)))
#+end_src
   
** diff-hl
#+begin_src emacs-lisp
(use-package diff-hl
  :config
  (global-diff-hl-mode t)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))
#+end_src

** Dired
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :custom
    (dired-auto-revert-buffer t)
    (global-auto-revert-non-file-buffers t)
    (dired-dwim-target t)
    (load-prefer-newer t)
    (dired-recursive-copies 'always)
    (dired-recursive-deletes 'always))

  (use-package all-the-icons-dired
    :hook(dired-mode . all-the-icons-dired-mode))
#+end_src
** Minibuffer
#+begin_src emacs-lisp
    (use-package amx)

    (use-package flx) ; Fuzzy search

    (use-package ivy
      :after ivy-rich
      :bind
      (:map mode-specific-map
            ("C-r" . ivy-resume))
      :custom
      (ivy-count-format "(%d/%d) " "Show anzu-like counter")
      (ivy-use-selectable-prompt t "Press C-p when you're on the first candidate to select input")
      (ivy-initial-inputs-alist nil "Don't start filter with ^")
                                            ;    (ivy-re-builders-alist '((t . ivy--regex-fuzzy)))
      (ivy-use-virtual-buffers t)
      :custom-face
      (ivy-current-match ((t (:inherit 'hl-line))))
      :config
      (ivy-mode t))

    (use-package counsel
      :bind
      (([remap isearch-forward] . counsel-grep-or-swiper)
       ([remap-isearch-backward] . swiper-isearch)
       :map mode-specific-map
       :prefix-map counsel-prefix-map
       :prefix "i"
       ("a" . counsel-apropos)
       ("f" . counsel-file-jump)
       ("g". counsel-org-goto)
       ("h" . counsel-command-history)
       ("r" . counsel-recentf)
       ("s r" . counsel-rg)
       :map help-map
       ("F" . counsel-describe-face))
      :init
      (counsel-mode))

    (use-package swiper)

    (use-package ivy-rich
      :defer 0.1
      :preface
      (defun ivy-rich-branch-candidate (candidate)
        "Displays the branch candidate of the candidate for ivy-rich."
        (let ((candidate (expand-file-name candidate ivy--directory)))
          (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
              ""
            (format "%s%s"
                    (propertize
                     (replace-regexp-in-string abbreviated-home-dir "~/"
                                               (file-name-directory
                                                (directory-file-name candidate)))
                     'face 'font-lock-doc-face)
                    (propertize
                     (file-name-nondirectory
                      (directory-file-name candidate))
                     'face 'success)))))

      (defun ivy-rich-file-group (candidate)
        "Displays the file group of the candidate for ivy-rich"
        (let ((candidate (expand-file-name candidate ivy--directory)))
          (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
              ""
            (let* ((group-id (file-attribute-group-id (file-attributes candidate)))
                   (group-function (if (fboundp #'group-name) #'group-name #'identity))
                   (group-name (funcall group-function group-id)))
              (format "%s" group-name)))))

      (defun ivy-rich-file-modes (candidate)
        "Displays the file mode of the candidate for ivy-rich."
        (let ((candidate (expand-file-name candidate ivy--directory)))
          (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
              ""
            (format "%s" (file-attribute-modes (file-attributes candidate))))))

      (defun ivy-rich-file-size (candidate)
        "Displays the file size of the candidate for ivy-rich."
        (let ((candidate (expand-file-name candidate ivy--directory)))
          (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
              ""
            (let ((size (file-attribute-size (file-attributes candidate))))
              (cond
               ((> size 1000000) (format "%.1fM " (/ size 1000000.0)))
               ((> size 1000) (format "%.1fk " (/ size 1000.0)))
               (t (format "%d " size)))))))

      (defun ivy-rich-switch-buffer-icon (candidate)
        "Returns an icon for the candidate out of `all-the-icons'."
        (with-current-buffer
            (get-buffer candidate)
          (let ((icon (all-the-icons-icon-for-mode major-mode :height 0.9)))
            (if (symbolp icon)
                (all-the-icons-icon-for-mode 'fundamental-mode :height 0.9)
              icon))))
      :config
      (plist-put ivy-rich-display-transformers-list
                 'counsel-find-file
                 '(:columns
                   (
  ;(ivy-rich-switch-buffer-icon       (:width 2))
                    (ivy-rich-candidate               (:width 73))
    ;                (ivy-rich-file-group              (:width 4 :face font-lock-doc-face))
                    (ivy-rich-file-modes              (:width 11 :face font-lock-doc-face))
                    (ivy-rich-file-size               (:width 7 :face font-lock-doc-face))
                    (ivy-rich-file-last-modified-time (:width 30 :face font-lock-doc-face)))))
      (plist-put ivy-rich-display-transformers-list
                 'counsel-projectile-switch-project
                 '(:columns
                   ((ivy-rich-branch-candidate        (:width 80)))))
      (plist-put ivy-rich-display-transformers-list
                 'ivy-switch-buffer
                 '(:columns
                   ((ivy-rich-switch-buffer-icon       (:width 2))
                    (ivy-rich-candidate                (:width 40))
                    (ivy-rich-switch-buffer-size       (:width 7))
                    (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
                    (ivy-rich-switch-buffer-major-mode (:width 20 :face warning)))
                   :predicate (lambda (cand) (get-buffer cand))))
      (ivy-rich-mode 1))

    (use-package all-the-icons-ivy
      :after (all-the-icons ivy)
      :custom (all-the-icons-ivy-buffer-commands '(ivy-switch-buffer-other-window))
      ;;:custom
      ;;(all-the-icons-ivy-buffer-commands '() "Don't use for buffers.")
      :config
      (add-to-list 'all-the-icons-ivy-file-commands 'counsel-dired-jump)
      (add-to-list 'all-the-icons-ivy-file-commands 'counsel-find-library)
      (all-the-icons-ivy-setup))
#+end_src

** npm-mode
#+begin_src emacs-lisp
  (use-package npm-mode
    :config
    (npm-global-mode))
#+end_src
** Version Control
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status))
#+END_SRC
** projectile
#+begin_src emacs-lisp
  (use-package projectile
    :bind
    (:map mode-specific-map ("p" . projectile-command-map))
    :custom
    (projectile-project-root-files-functions
     '(projectile-root-local
       projectile-root-top-down
       projectile-root-bottom-up
       projectile-root-top-down-recurring))
    (projectile-completion-system 'ivy)
    (projectile-mode +1))

  ;(add-to-list 'projectile-globally-ignored-directories "*node_modules")

  (use-package counsel-projectile
    :after counsel projectile
    :config
    (counsel-projectile-mode))
#+end_src

** Prescient
#+begin_src emacs-lisp
  (use-package prescient
    :config (prescient-persis-mode))

  (use-package company-prescient
    :after company
    :config (company-prescient-mode))

  (use-package ivy-prescient
    :after ivy
    :config (ivy-prescient-mode))
#+end_src
* Programming
** Dumb Jump
#+begin_src emacs-lisp
  (use-package dumb-jump
    :bind
    (:map prog-mode-map
          (("C-c C-o" . dumb-jump-go-other-window)
           ("C-c C-j" . dumb-jump-go)
           ("C-c C-i" . dumb-jump-go-prompt)))
    :custom (dumb-jump-selector 'ivy))
#+end_src
** Format All
#+begin_src emacs-lisp
  (use-package format-all
    :bind ("C-c C-f" . format-all-buffer))
#+end_src
** goto-chg
#+begin_src emacs-lisp
  (use-package goto-chg
    :bind ("C-," . goto-last-change))
#+end_src
** iedit
#+begin_src emacs-lisp
  (use-package iedit
    :custom
    (iedit-toggle-key-default (kbd "C-;"))
    :custom-face
    (iedit-occurrence ((t (:foreground "#000" :background "#E5C07B")))))
#+end_src
** Linter
Flycheck provides 'on the fly' syntax checking for many languages. I've seen other keep flycheck disabled globally and instead enable it for specific language modes in their section of the config.
#+begin_src emacs-lisp
  (use-package flycheck
    :config (flycheck-mode 1))
#+end_src

** LSP
#+begin_src emacs-lisp
  (setq lsp-keymap-prefix "C-c l")

  (use-package lsp-mode
    :custom
    (lsp-prefer-flymake nil)
    :hook(
          ((java-mode js-mode js2-mode typescript-mode web-mode) . lsp)
    (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  (require 'lsp-vetur)

  (setq lsp-eslint-server-command 
     '("node" 
       "/home/zach/.vscode/extensions/vscode-eslint/server/out/eslintServer.js" 
       "--stdio"))  


  ;; (use-package lsp-ui 
  ;;   :commands lsp-ui-mode
  ;;   :custom
  ;;   (lsp-sideline-enable nil)
  ;;   (lsp-ui-include-signature t))

  (use-package lsp-ui
    :ensure t
    :after (lsp-mode)
    :commands lsp-ui-doc-hide
    :bind (:map lsp-ui-mode-map
          ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
          ([remap xref-find-references] . lsp-ui-peek-find-references)
          ("C-c u" . lsp-ui-imenu))
    :init (setq lsp-ui-doc-enable t
          lsp-ui-doc-use-webkit nil
          lsp-ui-doc-header nil
          lsp-ui-doc-delay 0.2
          lsp-ui-doc-include-signature t
          lsp-ui-doc-alignment 'at-point
          lsp-ui-doc-use-childframe nil
          lsp-ui-doc-border (face-foreground 'default)
          lsp-ui-peek-enable t
          lsp-ui-peek-show-directory t
          lsp-ui-sideline-delay 10
          lsp-ui-sideline-update-mode 'point
          lsp-ui-sideline-enable t
          lsp-ui-sideline-show-code-actions t
          lsp-ui-sideline-show-hover t
          lsp-ui-sideline-ignore-duplicate t
          lsp-gopls-use-placeholders nil)
    :config
    (setq lsp-completion-provider :capf)
    (setq lsp-idle-delay 0.500)
    (setq lsp-print-performance t)

    (add-to-list 'lsp-ui-doc-frame-parameters '(right-fringe . 8))

    ;; `C-g'to close doc
    (advice-add #'keyboard-quit :before #'lsp-ui-doc-hide)

    ;; Reset `lsp-ui-doc-background' after loading theme
    (add-hook 'after-load-theme-hook
        (lambda ()
          (setq lsp-ui-doc-border (face-foreground 'default))
          (set-face-background 'lsp-ui-doc-background
             (face-background 'tooltip))))

    ;; WORKAROUND Hide mode-line of the lsp-ui-imenu buffer
    ;; @see https://github.com/emacs-lsp/lsp-ui/issues/243
    (defadvice lsp-ui-imenu (after hide-lsp-ui-imenu-mode-line activate)
      (setq mode-line-format nil)))

  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

  (setq lsp-ui-sideline-show-code-actions nil)
  (setq lsp-ui-doc-enable nil)
  ;;(use-package company-capf)

  (use-package dap-mode
    :after lsp-mode
    :config
    (dap-mode t)
    (dap-ui-mode t))

  ;;(require 'dap-python)
#+end_src

** multiple-cursors
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :bind (("C-S-c C-S-c" . mc/edit-lines)
           ("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)
           ("C-c C-<" . mc/mark-all-like-this)))
#+end_src
** rainbow-mode
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :hook (prog-mode))
#+END_SRC
** smartparens
#+begin_src emacs-lisp
  ;; (use-package smartparens
  ;;   :hook (prog-mode . smartparens-mode)
  ;;   :bind
  ;;   (:map smartparens-mode-map
  ;;         ("C-M-a" . sp-beginning-of-sexp) 
  ;;         ("C-M-e" . sp-end-of-sexp) 
  ;;         )
  ;;   :custom
  ;;   (sp-highlight-pair-overlay nil)
  ;;   :config
  ;;   (require 'smartparens-config))
#+end_src

* Languages
** CSS
#+BEGIN_SRC emacs-lisp
  (use-package css-mode
    :custom
    (css-indent-offset 2))
#+END_SRC
** HTML
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :bind (("C-c ]" . emmet-next-edit-point)
           ("C-c [" . emmet-prev-edit-point))
    :mode ("\\.html?\\'" "\\.vue?\\'")
    :custom-face
    (web-mode-current-element-highlight-face ((t (:foreground nil :background "#3E4551" :underline t))))
    :custom
    (web-mode-enable-auto-pairing nil)
    (web-mode-enable-auto-indentation nil)
    ;; (web-mode-markup-indent-offset 2)
    ;; (web-mode-css-indent-offset 2)
    ;; (web-mode-code-indent-offset 2)
    ;;(web-mode-enable-css-coloraization t)
    ;;(web-mode-enable-current-element-highlight t)
    )

  (use-package emmet-mode
    :custom
    (emmet-move-cursor-between-quotes t)
    :hook (web-mode js-mode)
    ;; :config
    ;; (setq emmet-expand-jsx-className? t)
    )

  (use-package company-web
    :config
    (add-to-list 'company-backends 'company-web-html))
#+END_SRC
  
** Java
 #+begin_src emacs-lisp
   (use-package lsp-java
     :after lsp
     :config
     (add-hook 'java-mode-hook 'lsp)
     :custom
     (lsp-java-server-install-dir (expand-file-name "~/.emacs.d/eclipse.jdt.ls/server/"))
     (lsp-java--workspace-folders (expand-file-name "~/Learning/interview/")))
 #+end_src
** JavaScript
 #+begin_src emacs-lisp
   (use-package prettier-js
     :hook (js-mode . prettier-js-mode)
     :custom
     (prettier-js-args '("--print-width" "100"
                         "--trailing-comma" "none"
                          "--jsx-single-quote" "true"
                          "--jsx-bracket-same-line" "true"
                          "--single-quote" "true"
                          "--bracket-spacing" "true")))

   (use-package js2-mode
     :hook
     ((js-mode . js2-minor-mode)
      (js2-mode . js2-imenu-extras-mode))
     :interpreter
     (("node" . js2-mode)
      ("node" . js2-jsx-mode))
     :mode "\\.js\\'"
     :custom (js-indent-level 2))

   (use-package js2-refactor
     :hook (js-mode . js2-refactor-mode)
     :config
     (js2r-add-keybindings-with-prefix "C-c C-r"))
 #+end_src
** JSON
#+begin_src emacs-lisp
  (use-package json-mode
    :mode "\\.json\\'")

  (add-hook 'json-mode-hook (lambda()
                              (js2-minor-mode -1)))
#+end_src
** LaTeX
#+begin_src emacs-lisp
    (use-package tex
      :ensure auctex
      :bind (:map TeX-mode-map
                  ("C-c C-o" . TeX-recenter-output-buffer)
                  ("C-c C-l" . TeX-next-error)
                  ("M-[" . outline-previous-heading)
                  ("M-]" . outline-next-heading))
      :custom
      (TeX-auto-save t)
      (TeX-byte-compile t)
      (TeX-clean-confirm nil)
      (TeX-master nil)
      (TeX-parse-self t)
      (TeX-PDF-mode t)
      (TeX-source-correlate-mode t)
      (TeX-view-program-selection '((output-pdf "PDF Tools"))))

    (use-package company-auctex
      :after (auctex company)
      :config (company-auctex-init))
#+end_src
** PHP
#+begin_src emacs-lisp
  (use-package php-mode)
#+end_src
** Python
#+begin_src emacs-lisp
  (use-package elpy
    :init
    (elpy-enable))

  (when (load "flycheck" t t)
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    (add-hook 'elpy-mode-hook 'flycheck-mode))
#+end_src

#+begin_src emacs-lisp
;;  (use-package virtualenvwrapper)
#+end_src
** Typescript
#+begin_src emacs-lisp
  (use-package typescript-mode
    :custom
    (typescript-indent-level 2))

  ;; (use-package tide
  ;;   :hook ((typescript-mode js2-mode) . tide-setup)
  ;;   :config
  ;;   (flycheck-add-next-checker 'javascript-eslint 'javascript-tide 'append))
#+end_src
** YAML
#+begin_src emacs-lisp
  (use-package yaml-mode
    :defer t)
#+end_src

* Web
** restclient
#+begin_src emacs-lisp
  (use-package restclient
    :mode ("\\.rest\\'" . restclient-mode))

  (use-package company-restclient
    :after (company restclient)
    :config (add-to-list 'company-backends 'company-restclient))

  (use-package ob-restclient)
#+end_src
* Org
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :bind
    (("C-c a" . org-agenda))
    :config
    (setq org-src-tab-acts-natively t)
    (setq org-src-window-setup 'current-window)
    (setq org-adapt-indentation nil)
    (setq org-hide-emphasis-markers t)

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((java . t)
       (restclient . t)
       (js . t))))

  (add-to-list 'org-structure-template-alist
               '("el" . "src emacs-lisp"))

  (add-to-list 'org-structure-template-alist
                '("ej" . "src java :file-name \"/home/zach/Learning/interview/interview.java\" :classname"))

  (add-to-list 'org-modules 'org-habit)

  (setq org-todo-keywords
        '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELLED(c@)")))
  (setq org-todo-keyword-faces
             '(("WAIT" . "#E5C07B")
               ("CANCELED" . (:foreground "#E06C75" :weight bold))))

  (use-package ox-hugo
    :after ox)

  (require 'ob-js)
#+END_SRC
** org-bullets
Show some pretty bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :hook (org-mode . org-bullets-mode))
#+END_SRC

** org-babel
The following function enables lsp when you open a src block within org-mode using =C-c '=
#+begin_src emacs-lisp
(defun org-babel-edit-prep:java (babel-info)
  (setq-local buffer-file-name (->> babel-info caddr (alist-get :file-name)))
  (setq-local lsp-buffer-uri (->> babel-info caddr (alist-get :file-name) lsp--path-to-uri))
  (lsp)
  (push 'company-lsp company-backends)
  (lsp-ui-mode t)
  (flycheck-mode t)
  (company-mode t)
  (lsp-ui-flycheck-enable t))
#+end_src

** pretty
#+begin_src emacs-lisp
  (when (is-linux)
  (custom-theme-set-faces
   'user
   '(variable-pitch ((t (:family "Source Sans Pro" :height 110 :weight normal))))
   '(fixed-pitch ((t ( :family "IBMPlexMono" :slant normal :weight normal :height 0.8 :width normal)))))
  )

  (when (is-darwin)
  (custom-theme-set-faces
   'user
   '(variable-pitch ((t (:family "Source Sans Pro" :height 140 :weight normal))))
   '(fixed-pitch ((t ( :family "IBM Plex Mono" :slant normal :weight normal :height 0.8 :width normal)))))
    )

  (add-hook 'org-mode-hook 'variable-pitch-mode)

  (custom-theme-set-faces
   'user
   '(org-block                 ((t (:background "#21272d" :inherit fixed-pitch))))
   '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
   '(org-link                  ((t (:foreground "royal blue" :underline t))))
   '(org-meta-line             ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-property-value        ((t (:inherit fixed-pitch))) t)
   '(org-special-keyword       ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-tag                   ((t (:inherit (shadow fixed-pitch) :weight bold :height 1.0))))
   '(org-table              ((t (:inherit (shadow fixed-pitch)))))
   '(org-verbatim              ((t (:inherit (shadow fixed-pitch)))))
  )
                                          ;'(org-indent                ((t (:inherit (org-hide fixed-pitch))))))
#+end_src
* RSS
Using =elfeed=
I used newsboat in my terminal before but elfeed already seems like an upgrade. Since emacs uses a GUI, it means that pictures show.
#+begin_src emacs-lisp
(use-package elfeed
  :bind
  ("C-x w" . elfeed))
#+end_src

Load up feeds with =elfeed-org=
#+begin_src emacs-lisp
(use-package elfeed-org
  :config
  (elfeed-org)
  (setq rmh-elfeed-org-files (list "~/org/feeds.org")))
#+end_src
* Media
** pdf
#+begin_src emacs-lisp
  (use-package pdf-tools
    :mode ("\\.pdf\\'" . pdf-view-mode)
    :config
    (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-page)
    )
#+end_src

#+TITLE: Emacs Configuration
#+AUTHOR: Zach Crystal

* Configure =use-package=
#+BEGIN_SRC emacs-lisp
(require 'use-package-ensure)
(setq use-package-always-ensure t)

(use-package auto-compile
  :config (auto-compile-on-load-mode))
(setq load-prefer-newer t)
#+END_SRC

* UI
** Modeline
I like doom-modeline. It's cool.
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :hook (after-init . doom-modeline-mode))
#+END_SRC

** Settings
Turn off all GUI menu stuff and other general stuff
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)

(global-hl-line-mode 1)

(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Font
#+begin_src emacs-lisp
(set-frame-font "Iosevka 10" nil t)
#+end_src

** Theme
Gotta have aod everywhere
#+BEGIN_SRC emacs-lisp
  (use-package atom-one-dark-theme
    :config
    ;(set-face-background 'org-block-begin-line "#21272d")
    (set-face-background 'org-block "#21272d")
    (set-face-foreground 'org-block-begin-line "#525E6C")
    :init(load-theme 'atom-one-dark t))
#+END_SRC

* Editor Settings
#+BEGIN_SRC emacs-lisp
(setq-default
 indent-tabs-mode nil
 tab-width 2
 fill-column 80
 c-basic-offset 2)

(show-paren-mode t)
(electric-pair-mode 1)
(set-default-coding-systems 'utf-8)

;; Misc Config
(setq make-backup-files nil)
(setq auto-save-default nil)
(setq ring-bell-function 'ignore)
(setq sentence-end-double-space nil)

;; after copy Ctrl+c in Linux X11, you can paste by 'yank' in emacs
(setq x-select-enable-clipboard t)

;; after mouse selection in X11, you can paste by 'yank' in emacs
(setq x-select-enable-primary t)
#+END_SRC
When you have text selected, pressing a key replaces the current selected text
#+begin_src emacs-lisp
(delete-selection-mode t)
#+end_src

* Base Packages
** adaptive-wrap
Wrap lines but also keeps them indented
#+BEGIN_SRC emacs-lisp
(use-package adaptive-wrap
  :config
  (setq-default adaptive-wrap-extra-indent 1)
  (add-hook 'visual-line-mode-hook #'adaptive-wrap-prefix-mode)
  (global-visual-line-mode +1))
#+END_SRC

** alert
#+begin_src emacs-lisp
(use-package alert
  :config
  (setq alert-default-style 'libnotify))
#+end_src

** Company
#+BEGIN_SRC emacs-lisp
(use-package company
  :config
  (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC

** Crux
Keybindings that help move around
#+BEGIN_SRC emacs-lisp
(use-package crux
  :bind (("C-a" . crux-move-beginning-of-line)
         ("C-k" . crux-smart-kill-line)
         ("C-c I" . crux-find-user-init-file)
         ("C-S-o" . crux-smart-open-line-above)
         ("C-o" . crux-smart-open-line)
         ("C-c d" . crux-duplicate-current-line-or-region)
         ("C-c M-d" . crux-duplicate-and-comment-current-line-or-region)
         ("C-c n" . crux-cleanup-buffer-or-region)))
#+END_SRC

** Dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :config
  (dashboard-setup-startup-hook))
#+END_SRC

** expand-region
Quicker selection of text. Doesn't always work as I would like. Sometimes it goes from highlighting the line to highlighting the entire page which I dont like.
#+begin_src emacs-lisp
  (use-package expand-region
    :bind (("C-=" . er/expand-region)
           ("C-+" . er/contract-region)))
#+end_src

** shell-pop
=C-t= pops up an ansi-term which works with fish. =C-d= closes the buffer.
#+BEGIN_SRC emacs-lisp
(use-package shell-pop
  :bind (("C-t" . shell-pop))
  :config
  (setq shell-pop-shell-type (quote ("ansi-term" "*ansi-term*" (lambda nil (ansi-term shell-pop-term-shell)))))
  (setq shell-pop-term-shell "/usr/bin/fish")
  ;; need to do this manually or not picked up by `shell-pop'
  (shell-pop--set-shell-type 'shell-pop-shell-type shell-pop-shell-type))
#+END_SRC

** undo-tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :bind ("C-x u" . undo-tree-visualize)
    :config
    (global-undo-tree-mode t))
#+end_src

** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :init
  (setq which-key-separator " ")
  (setq which-key-prefix-prefix "+")
  :config
  (which-key-mode))
#+END_SRC

* Project Management
** ace-jump-mode
#+BEGIN_SRC emacs-lisp
(use-package ace-jump-mode
  :bind
  ("C-c SPC" .  ace-jump-mode))
#+END_SRC

** avy
#+BEGIN_SRC emacs-lisp  
(use-package avy
  :bind (("C-'" . avy-goto-char-2)
         ("M-g f" . avy-goto-line)
         ("M-g w" . avy-goto-word-1))
  :config
  (setq avy-background t))
#+END_SRC

** helm Packages
I started initially with ivy but didn't like the way it looked. I think helm looks pretty dope and it doesn't seem slow to me... yet.
*** helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :init
    (require 'helm-config)
    :config
    (bind-key "C-c h" helm-command-prefix)
    (setq helm-quick-update t
          helm-autoresize-mode t
          helm-idle-delay 0.0
          helm-input-idle-delay 0.01
          helm-ff-skip-boring-files t)
    (helm-mode t)
    :bind
    (("C-c h" . helm-command-prefix)
     ("C-x b" . helm-mini)
     ("M-x" . helm-M-x)
     ("M-y" . helm-show-kill-ring)
     ("C-x C-f" . helm-find-files)
     ("C-x v" . helm-projectile)
     ("C-x c o" . helm-occur)))
#+END_SRC

*** helm-descbinds
Helm frontend for emacs' =describe-bindings= making the currently active key bindings interactively searchable.
#+BEGIN_SRC emacs-lisp
(use-package helm-descbinds
  :bind ("C-h b" . helm-descbinds)
  :config
  (helm-descbinds-mode))



#+END_SRC
  
*** helm-projectile
#+begin_src emacs-lisp
(use-package helm-projectile
  :config
  (helm-projectile-on))


#+end_src
** magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind ("C-x g" . magit-status))
#+END_SRC
** diff-hl
#+begin_src emacs-lisp
(use-package diff-hl
  :config
  (global-diff-hl-mode t)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))
#+end_src

** projectile
#+begin_src emacs-lisp
(use-package projectile
  :bind
  (("C-c p f" . helm-projectile-find-file)
   ("C-c p p" . helm-projectile-switch-project))

  :config
  (projectile-global-mode)
  (setq projectile-completion-system 'helm
	projectile-enable-caching t
	indexing-projectile-method 'alien))
#+end_src

* Programming
** Environment
*** aggressive-indent
#+begin_src emacs-lisp
(use-package aggressive-indent)
#+end_src

*** smartparens
#+begin_src emacs-lisp
(use-package smartparens
  :config
  (setq sp-highlight-pair-overlay nil)
  (add-hook 'prog-mode-hook 'smartparens-mode))
#+end_src

** Linter
Flycheck provides 'on the fly' syntax checking for many languages. I've seen other keep flycheck disabled globally and instead enable it for specific language modes in their section of the config.
#+begin_src emacs-lisp
(use-package flycheck)
#+end_src

** LSP
I'm used to using LSPs in vim so naturally I'll check it out here
#+begin_src emacs-lisp
(use-package lsp-mode
  :hook((java-mode) . lsp)
  :commands lsp)

(use-package lsp-ui 
  :commands lsp-ui-mode
  :config
  (setq lsp-ui-sideline-show-code-actions nil))
(use-package company-lsp :commands company-lsp)
(use-package helm-lsp :commands helm-lsp-workspace-symbol)
#+end_src

** Web
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :hook (prog-mode))
#+END_SRC

*** HTML
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :bind (("C-c ]" . emmet-next-edit-point)
         ("C-c [" . emmet-prev-edit-point))
  :mode (("\\.html?\\'" . web-mode))
  :config
  (set-face-background 'web-mode-current-element-highlight-face "#3E4451")
  (set-face-foreground 'web-mode-current-element-highlight-face nil)
  (setq web-mode-markup-indent-offset 2
        web-mode-css-indent-offset 2
        web-mode-code-indent-offset 2
        web-mode-enable-css-coloraization t
        web-mode-enable-auto-pairing t
        web-mode-enable-current-element-highlight t)

  (use-package emmet-mode
    :init (setq emmet-move-cursor-between-quotes t))
  (add-hook 'web-mode-hook 'emmet-mode))
  #+END_SRC
  
*** CSS
#+BEGIN_SRC emacs-lisp
(use-package css-mode
  :config
  (setq css-indent-offset 2))
#+END_SRC

** Java
#+begin_src emacs-lisp
(use-package lsp-java
  :after lsp
  :config
  (add-hook 'java-mode-hook 'lsp)
  (setq lsp-java--workspace-folders (list "~/Learning/interview/")))
#+end_src

* Org
#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure org-plus-contrib
  :bind (("C-c a" . org-agenda)
         ("C-c c" . org-capture))
  :config
  (setq org-startup-indented t)
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-src-window-setup 'current-window)
  (setq org-src-preserve-indentation t)
  (setq org-hide-emphasis-markers t)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((java . t))))
;(require 'org-tempo)

(add-to-list 'org-structure-template-alist
             '("el" . "src emacs-lisp"))
#+END_SRC

** org-bullets
Show some pretty bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :config (progn (add-hook 'org-mode-hook
			   (lambda ()
			     (org-bullets-mode 1)))))
#+END_SRC

** org-babel
The following function enables lsp when you open a src block within org-mode using =C-c '=
#+begin_src emacs-lisp
(defun org-babel-edit-prep:java (babel-info)
  (setq-local buffer-file-name (->> babel-info caddr (alist-get :file-name)))
  (setq-local lsp-buffer-uri (->> babel-info caddr (alist-get :file-name) lsp--path-to-uri))
  (lsp)
  (push 'company-lsp company-backends)
  (lsp-ui-mode t)
  (flycheck-mode t)
  (company-mode t)
  (lsp-ui-flycheck-enable t))
#+end_src

** org-alert
#+begin_src emacs-lisp
(use-package org-alert
  :config
  (setq org-alert-interval 600)
  (org-alert-enable))
#+end_src

* RSS
Using =elfeed=
I used newsboat in my terminal before but elfeed already seems like an upgrade. Since emacs uses a GUI, it means that pictures show.
#+begin_src emacs-lisp
(use-package elfeed
  :bind
  ("C-x w" . elfeed))
#+end_src

Load up feeds with =elfeed-org=
#+begin_src emacs-lisp
(use-package elfeed-org
  :config
  (elfeed-org)
  (setq rmh-elfeed-org-files (list "~/org/feeds.org")))
#+end_src

#+TITLE: Emacs Configuration
#+AUTHOR: Zach Crystal

* Configure =use-package=
#+BEGIN_SRC emacs-lisp
(require 'use-package-ensure)
(setq use-package-always-ensure t)

(use-package auto-compile
  :config (auto-compile-on-load-mode))
(setq load-prefer-newer t)
#+END_SRC

* Misc
** Personal Info
#+begin_src emacs-lisp
(setq user-full-name "Zach Crystal"
      user-full-address "zachcrystal@gmail.com")
#+end_src

** Custom.el
Put all the customize code in its own separate file, instead of it cluttering init.el
#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file 'noerror)
#+end_src

** Garbage Collector
#+begin_src emacs-lisp
(use-package gcmh
  :init
  (gcmh-mode 1))
#+end_src

* UI
** Font
#+begin_src emacs-lisp
(set-frame-font "Iosevka 10" nil t)
#+end_src

** Modeline
I like doom-modeline. It's cool.
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :hook (after-init . doom-modeline-mode))
#+END_SRC

** paradox
#+begin_src emacs-lisp
(use-package paradox
  :config
  (paradox-enable))
#+end_src

** Scrolling
Is this even doing anything?
#+begin_src emacs-lisp
(setq scroll-margin 0
      scroll-conservatively 10000
      scroll-preserve-screen-position t
      auto-window-vscroll nil)
#+end_src

** Settings
Turn off all GUI menu stuff and other general stuff
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)

(global-hl-line-mode 1)

(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Theme
Gotta have aod everywhere
#+BEGIN_SRC emacs-lisp
  (use-package atom-one-dark-theme
    :config
    ;(set-face-background 'org-block-begin-line "#21272d")
    (set-face-background 'org-block "#21272d")
    (set-face-foreground 'org-block-begin-line "#525E6C")
    :init(load-theme 'atom-one-dark t))
#+END_SRC

** Icons
#+begin_src emacs-lisp
(use-package all-the-icons)

(use-package all-the-icons-ivy
  :after ivy
  :custom
  (all-the-icons-ivy-buffer-commands '() "Don't use for buffers.")
  :config
  (all-the-icons-ivy-setup))
#+end_src

* Editor Settings
#+BEGIN_SRC emacs-lisp
(setq-default
 indent-tabs-mode nil
 tab-width 2
 fill-column 80
 c-basic-offset 2
 scroll-step 1
 enable-recursive-minibuffers t)

(show-paren-mode t)
(electric-pair-mode 1)
(set-default-coding-systems 'utf-8)

;; Misc Config
(setq make-backup-files nil)
(setq auto-save-default nil)
(setq ring-bell-function 'ignore)
(setq sentence-end-double-space nil)

;; after copy Ctrl+c in Linux X11, you can paste by 'yank' in emacs
(setq x-select-enable-clipboard t)

;; after mouse selection in X11, you can paste by 'yank' in emacs
(setq x-select-enable-primary t)
#+END_SRC

When you have text selected, pressing a key replaces the current selected text
#+begin_src emacs-lisp
(delete-selection-mode t)
#+end_src

* Base Packages
** adaptive-wrap
Wrap lines but also keeps them indented
#+BEGIN_SRC emacs-lisp
(use-package adaptive-wrap
  :config
  (setq-default adaptive-wrap-extra-indent 1)
  (add-hook 'visual-line-mode-hook #'adaptive-wrap-prefix-mode)
  (global-visual-line-mode +1))
#+END_SRC

** alert
#+begin_src emacs-lisp
(use-package alert
  :config
  (setq alert-default-style 'libnotify))
#+end_src

** Company
#+BEGIN_SRC emacs-lisp
(use-package company
  :bind
  (:map company-active-map
        ("C-n" . company-select-next-or-abort)
        ("C-p" . company-select-previous-or-abort))
  :hook
  (after-init . global-company-mode))

(use-package company-quickhelp
  :custom
  (company-quickhelp-delay 3)
  :config
  (company-quickhelp-mode 1))
#+END_SRC

** Crux
Keybindings that help move around
#+BEGIN_SRC emacs-lisp
(use-package crux
  :bind (("C-a" . crux-move-beginning-of-line)
         ("C-k" . crux-smart-kill-line)
         ("C-c I" . crux-find-user-init-file)
         ("C-S-o" . crux-smart-open-line-above)
         ("C-o" . crux-smart-open-line)
         ("C-c d" . crux-duplicate-current-line-or-region)
         ("C-c M-d" . crux-duplicate-and-comment-current-line-or-region)
         ("C-c n" . crux-cleanup-buffer-or-region)))
#+END_SRC

** Dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :config
  (dashboard-setup-startup-hook))
#+END_SRC

** expand-region
Quicker selection of text. Doesn't always work as I would like. Sometimes it goes from highlighting the line to highlighting the entire page which I dont like.
#+begin_src emacs-lisp
(use-package expand-region
  :bind
  (("C-=" . er/expand-region)
   ("C-+" . er/contract-region)
   :map mode-specific-map
   :prefix-map region-prefix-map
   :prefix "r"
   ("(" . er/mark-inside-pairs)
   (")" . er/mark-outside-pairs)
   ("'" . er/mark-inside-quotes)
   ([34] . er/mark-outside-quotes) ; it's just a quotation mark
   ("u" . er/mark-url)))



#+end_src

** shell-pop
=C-t= pops up an ansi-term which works with fish. =C-d= closes the buffer.
#+BEGIN_SRC emacs-lisp
(use-package shell-pop
  :bind (("C-t" . shell-pop))
  :config
  (setq shell-pop-shell-type (quote ("ansi-term" "*ansi-term*" (lambda nil (ansi-term shell-pop-term-shell)))))
  (setq shell-pop-term-shell "/usr/bin/fish")
  ;; need to do this manually or not picked up by `shell-pop'
  (shell-pop--set-shell-type 'shell-pop-shell-type shell-pop-shell-type))
#+END_SRC

** undo-tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :bind ("C-x u" . undo-tree-visualize)
    :config
    (global-undo-tree-mode t))
#+end_src

** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :init
  ;(setq which-key-separator " ")
  ;(setq which-key-prefix-prefix "+")
  :config
  (which-key-mode))
#+END_SRC

** yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :config
  (yas-global-mode))

(use-package yasnippet-snippets)
#+end_src

* Project Management
** avy
#+BEGIN_SRC emacs-lisp  
(use-package avy
  :bind (("C-:" . avy-goto-char)
         ("C-'" . avy-goto-char-2)
         ("M-g f" . avy-goto-line)
         ("M-g w" . avy-goto-word-1))
  :config
  (setq avy-background t))

(use-package avy-zap
  :bind
  ([remap zap-to-char] . avy-zap-to-char))
#+END_SRC

** ace-window
#+begin_src emacs-lisp
(use-package ace-window
  :custom
  (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l) "Use home row for selecting")
  (aw-scope 'frame "Highlight only current frame.")
  :bind
  ("M-o" . ace-window))
#+end_src

** ace-jump-buffer
#+begin_src emacs-lisp
(use-package ace-jump-buffer
  :bind
  (:map goto-map
        ("b" . ace-jump-buffer)))
#+end_src
   
** diff-hl
#+begin_src emacs-lisp
(use-package diff-hl
  :config
  (global-diff-hl-mode t)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))
#+end_src

** Minibuffer
#+begin_src emacs-lisp
(use-package smex)

(use-package flx) ; Fuzzy search

(use-package ivy
  :custom
  (ivy-count-format "%d/%d " "Show anzu-like counter")
  (ivy-use-selectable-prompt t "Press C-p when you're on the first candidate to select input")
  :custom-face
  (ivy-current-match ((t (:inherit 'hl-line))))
  :bind
  (:map mode-specific-map
        ("C-r" . ivy-resume))
  :config
  (ivy-mode t))

(use-package counsel
  :bind
  (([remap isearch-forward] . counsel-grep-or-swiper)
  :map mode-specific-map
  :prefix-map counsel-prefix-map
  :prefix "c"
  ("a" . counsel-apropos)
  ("f" . counsel-file-jump)
  ("g". counsel-org-goto)
  ("p" . counsel-package)
  :map help-map
  ("F" . counsel-describe-face))
  :init
  (counsel-mode))

(use-package swiper)

(use-package ivy-rich
  :config
  (ivy-rich-mode 1))

#+end_src

** magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind ("C-x g" . magit-status))
#+END_SRC
** projectile
#+begin_src emacs-lisp
(use-package projectile
  :bind
  (:map mode-specific-map ("p" . projectile-command-map))
  :custom
  (projectile-project-root-files-functions
   '(projectile-root-local
     projectile-root-top-down
     projectile-root-bottom-up
     projectile-root-top-down-recurring))
  (projectile-completion-system 'ivy)
  (projectile-mode +1))

(use-package counsel-projectile
  :after counsel projectile
  :config
  (counsel-projectile-mode))
#+end_src

* Programming
** Environment
*** aggressive-indent
#+begin_src emacs-lisp
(use-package aggressive-indent)
#+end_src

*** smartparens
#+begin_src emacs-lisp
(use-package smartparens
  :config
  (setq sp-highlight-pair-overlay nil)
  (add-hook 'prog-mode-hook 'smartparens-mode))
#+end_src

*** rainbow-mode
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :hook (prog-mode))
#+END_SRC
** Linter
Flycheck provides 'on the fly' syntax checking for many languages. I've seen other keep flycheck disabled globally and instead enable it for specific language modes in their section of the config.
Edit**: I'm going to turn it on for prog-mode
#+begin_src emacs-lisp
(use-package flycheck
  :hook
  (prog-mode . flycheck-mode))
#+end_src

** LSP
I'm used to using LSPs in vim so naturally I'll check it out here
#+begin_src emacs-lisp
(use-package lsp-mode
  :hook((java-mode) . lsp)
  :commands lsp)

(use-package lsp-ui 
  :commands lsp-ui-mode
  :config
  (setq lsp-ui-sideline-show-code-actions nil))
(use-package company-lsp :commands company-lsp)
(use-package helm-lsp :commands helm-lsp-workspace-symbol)
#+end_src

** Languages
*** HTML
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :bind (("C-c ]" . emmet-next-edit-point)
         ("C-c [" . emmet-prev-edit-point))
  :mode (("\\.html?\\'" . web-mode))
  :config
  (set-face-background 'web-mode-current-element-highlight-face "#3E4451")
  (set-face-foreground 'web-mode-current-element-highlight-face nil)
  (setq web-mode-markup-indent-offset 2
        web-mode-css-indent-offset 2
        web-mode-code-indent-offset 2
        web-mode-enable-css-coloraization t
        web-mode-enable-auto-pairing t
        web-mode-enable-current-element-highlight t))

(use-package emmet-mode
  :init
  (setq emmet-move-cursor-between-quotes t)
  :hook web-mode)
#+END_SRC
  
*** CSS
#+BEGIN_SRC emacs-lisp
(use-package css-mode
  :config
  (setq css-indent-offset 2))
#+END_SRC
*** Java
 #+begin_src emacs-lisp
(use-package lsp-java
  :after lsp
  :config
  (add-hook 'java-mode-hook 'lsp)
  (setq lsp-java--workspace-folders (list "~/Learning/interview/")))
 #+end_src
*** Javascript
 #+begin_src emacs-lisp
(use-package prettier-js
  :custom
  (prettier-js-args '("--print-width" "100"
                      "--trailing-comma" "all")))

(use-package js2-mode
  :hook ((js2-mode . js2-imenu-extras-mode)
         (js2-mode . prettier-js-mode))
  :mode "\\.js'"
  :custom
  (js-indent-level 2))

(use-package js2-refactor
  :hook (js2-mode . js2-refactor-mode)
  :config
  (js2r-add-keybindings-with-prefix "C-c C-m"))
 #+end_src

*** JSON
#+begin_src emacs-lisp
(use-package json-mode
  :defer t)
#+end_src
* Org
#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure org-plus-contrib
  :bind (("C-c a" . org-agenda))
  :config
  ;(setq org-startup-indented t)
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-src-window-setup 'current-window)
  (setq org-src-preserve-indentation t)
  (setq org-hide-emphasis-markers t)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((java . t))))
;(require 'org-tempo)

(add-to-list 'org-structure-template-alist
             '("el" . "src emacs-lisp"))
#+END_SRC

** org-bullets
Show some pretty bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :hook (org-mode . org-bullets-mode))
#+END_SRC

** org-babel
The following function enables lsp when you open a src block within org-mode using =C-c '=
#+begin_src emacs-lisp
(defun org-babel-edit-prep:java (babel-info)
  (setq-local buffer-file-name (->> babel-info caddr (alist-get :file-name)))
  (setq-local lsp-buffer-uri (->> babel-info caddr (alist-get :file-name) lsp--path-to-uri))
  (lsp)
  (push 'company-lsp company-backends)
  (lsp-ui-mode t)
  (flycheck-mode t)
  (company-mode t)
  (lsp-ui-flycheck-enable t))
#+end_src

** org-alert
#+begin_src emacs-lisp
(use-package org-alert
  :config
  (setq org-alert-interval 600)
  (org-alert-enable))
#+end_src

* RSS
Using =elfeed=
I used newsboat in my terminal before but elfeed already seems like an upgrade. Since emacs uses a GUI, it means that pictures show.
#+begin_src emacs-lisp
(use-package elfeed
  :bind
  ("C-x w" . elfeed))
#+end_src

Load up feeds with =elfeed-org=
#+begin_src emacs-lisp
(use-package elfeed-org
  :config
  (elfeed-org)
  (setq rmh-elfeed-org-files (list "~/org/feeds.org")))
#+end_src
* Media
** pdf
#+begin_src emacs-lisp
(use-package pdf-tools
  :mode ("\\.pdf\\'" . pdf-view-mode)
  :config
  (pdf-loader-install))
#+end_src
